steam <- read_csv(file.choose())
steam <- read_csv(file.choose())
library(tidyverse)
library(forecast)
library(car)
library(leaps)
library(caret)
library(openxlsx)
steam <- read_csv(file.choose())
View(steam)
summary(steam)
#check for duplicate rows
count(steam) - count(unique(steam))
# reduce to unique rows
steam <- unique(steam)
table(steam$RequiredAge)
steam$RequiredAge <- ifelse(steam$RequiredAge == 0, 17, steam$RequiredAge)
steam <- steam %>%
mutate(AgeRating = case_when(RequiredAge < 10 ~ "Everyone",
RequiredAge < 13 ~ "Everyone10+",
RequiredAge < 17 ~ "Teen",
RequiredAge < 18 ~ "Mature",
.default = "Adult")
)
table(steam$AgeRating, steam$RequiredAge)
steam_binary_conv_df <- steam[,grepl("Genre", names(steam))] * 1
steam_test <-  steam
steam_test$NoGenres <- ifelse(rowSums(steam_binary_conv_df) == 0, 1, 0) # 1 means content has no recorded genre
x_nosec <- select(steam_test ,c(ResponseName, names(steam_test[,grepl("Genre", names(steam_test))])))
count(steam) - count(subset(x_nosec, NoGenres == 0))
# NoGenres and NoGame genres need to be removed
count(steam_test) - count(steam_test[steam_test$GenreIsNonGame == TRUE | steam_test$NoGenres > 0,])
count(steam_test[-which(steam_test$GenreIsNonGame == TRUE | steam_test$NoGenres > 0),])
steam_test <- steam_test[-which(steam_test$GenreIsNonGame == TRUE | steam_test$NoGenres > 0),]
for (colName in names(steam[,grepl("Genre", names(steam))])) {
newColName <- paste(c(as.character(colName),"Binary"), collapse = "")
steam_test
steam_test[,newColName] <- steam_test[,colName]*1
}
view(steam_test)
max(rowSums(steam_binary_conv_df))
max(steam$DLCCount)
table(steam$PriceCurrency)
steam_binary_conv_df <- steam_test[,grepl("Category", names(steam_test))] * 1
steam_test$NoCategory <- ifelse(rowSums(steam_binary_conv_df) == 0, 1, 0) # 1 means content has no recorded genre
x_nosec <- select(steam_test ,c(ResponseName, names(steam_test[,grepl("Category", names(steam_test))])))
count(steam_test) - count(subset(x_nosec, NoCategory == 0))
for (colName in names(steam[,grepl("Category", names(steam))])) {
newColName <- paste(c(as.character(colName),"Binary"), collapse = "")
steam_test
steam_test[,newColName] <- steam_test[,colName]*1
}
help("select_if")
names(select_if(steam, is.logical))
for (colName in names(select_if(steam_test, is.logical))) {
if (paste(c(as.character(colName),"Binary"), collapse = "") %in% names(steam_test)) {
}
else {
print(colName)
newColName <- paste(c(as.character(colName),"Binary"), collapse = "")
steam_test
steam_test[,newColName] <- steam_test[,colName]*1
}
}
!complete.cases(steam_test)
names(which(colSums(is.na(steam_test)) > 0))
steam_test[is.na(steam_test$QueryName), ]
steam_test[is.na(steam_test$QueryName), "QueryName"] <- steam_test[is.na(steam_test$QueryName), "ResponseName"]
steam_test[steam_test$QueryID == 8780, ]
steam_test[is.na(steam_test$ReleaseDate), ]
steam_test[is.na(steam_test$PriceCurrency), ]
table(steam_test$PriceCurrency)
steam_test[is.na(steam_test$PriceCurrency), "PriceCurrency"] <- "USD"
steam_test[is.na(steam_test$SupportedLanguages), ]
table(steam_test$SupportedLanguages)
steam_test[is.na(steam_test$SupportedLanguages), "SupportedLanguages"] <- "English"
steam_test[is.na(steam_test$SupportedLanguages), ]
view(steam_test[is.na(steam_test$Reviews), ])
names(which(colSums(is.na(steam_test)) > 0))
table(steam_test$RecommendationCount)
